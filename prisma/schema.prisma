// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User role enum
enum UserRole {
  USER
  ARTIST
  ADMIN
}

// User status enum
enum UserStatus {
  PENDING
  ACTIVE
  BLOCKED
}

model User {
  id            String     @id @default(cuid())
  clerkId       String     @unique // ID from Clerk authentication
  email         String     @unique
  name          String?
  role          UserRole   @default(USER)
  status        UserStatus @default(PENDING)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  createdEvents Event[]    @relation("CreatedBy") // Events created by this user
  artistProfile Artist?    @relation("UserToArtist") // Optional artist profile
}

model Event {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String? // Optional description
  dates       EventDate[] // Multiple dates for an event
  location    String
  time        String
  price       Float? // Optional price
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  artistId    String
  artist      Artist      @relation(fields: [artistId], references: [id])
  genre       String
  images      Image[] // Multiple images for an event
  isActive    Boolean     @default(true)

  // New fields for user-related functionality
  createdById String?
  createdBy   User?   @relation("CreatedBy", fields: [createdById], references: [id])
}

model EventDate {
  id      String   @id @default(cuid())
  date    DateTime
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
}

model Artist {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  genres      String[] // Array of genre strings
  bio         String
  origin      String
  images      Image[]
  socialMedia Json? // Store social media links as JSON
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // New fields for user association
  userId String? @unique
  user   User?   @relation("UserToArtist", fields: [userId], references: [id])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String?
  artist    Artist?  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId  String?
  createdAt DateTime @default(now())
}
