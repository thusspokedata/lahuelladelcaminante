import { PrismaClient, UserRole, UserStatus } from "../src/generated/prisma";
import { mockArtists, mockEvents } from "../src/mockData";
import { slugify } from "../src/lib/utils";

const prisma = new PrismaClient();

// Map to store the new IDs generated by Prisma for artists
const artistIdMap = new Map<string, string>();

async function main() {
  console.log("Starting seed...");

  // Clear existing data
  await prisma.image.deleteMany();
  await prisma.eventDate.deleteMany();
  await prisma.event.deleteMany();
  await prisma.artist.deleteMany();
  await prisma.user.deleteMany();

  console.log("Deleted existing data");

  // Create admin user first
  const adminUser = await prisma.user.create({
    data: {
      clerkId: "admin_clerk_id", // Mock Clerk ID for admin
      email: "info@lahuelladelcaminante.com",
      firstName: "Admin",
      lastName: "User",
      role: UserRole.ADMIN,
      status: UserStatus.ACTIVE,
    },
  });

  console.log(`Created admin user: ${adminUser.email} with ID: ${adminUser.id}`);

  // Create artist user accounts
  for (const artistData of mockArtists) {
    // Create a user account for each artist
    const artistUser = await prisma.user.create({
      data: {
        clerkId: `clerk_${artistData.id}`, // Mock Clerk ID
        email: `${slugify(artistData.name)}@lahuelladelcaminante.com`,
        firstName: artistData.name.split(" ")[0],
        lastName: artistData.name.split(" ").slice(1).join(" ") || "",
        role: UserRole.USER,
        status: UserStatus.ACTIVE,
      },
    });

    console.log(`Created artist user: ${artistUser.email} with ID: ${artistUser.id}`);

    // Now create the artist profile linked to the user
    const artistSlug = slugify(artistData.name);

    const artist = await prisma.artist.create({
      data: {
        // Remove the id field to let Prisma generate a CUID
        name: artistData.name,
        slug: artistSlug,
        genres: artistData.genres,
        bio: artistData.bio,
        origin: artistData.origin,
        socialMedia: artistData.socialMedia || {},
        profileImageId: null,
        // Link to the user account
        userId: artistUser.id,
        // Create images
        images: {
          create: artistData.images.map((img) => ({
            url: img.url,
            alt: img.alt,
          })),
        },
      },
    });

    // Store the mapping between original ID and Prisma-generated ID
    artistIdMap.set(artistData.id, artist.id);
    console.log(
      `Created artist profile: ${artist.name} with ID: ${artist.id} and slug: ${artist.slug}`
    );
  }

  // Seed events
  for (const eventData of mockEvents) {
    // Find artist by name to get artist ID
    const artist = await prisma.artist.findFirst({
      where: { name: eventData.artist },
      include: { user: true }, // Include the user to access the creator
    });

    if (!artist) {
      console.log(`Artist not found for event: ${eventData.title}`);
      continue;
    }

    const eventSlug = slugify(eventData.title);

    // Create the event
    const event = await prisma.event.create({
      data: {
        // Remove the id field to let Prisma generate a CUID
        title: eventData.title,
        slug: eventSlug,
        description: eventData.description || "",
        time: eventData.time,
        location: eventData.location,
        price: eventData.price !== undefined ? eventData.price : null,
        genre: eventData.genre,
        artistId: artist.id,
        organizer: eventData.artist || "La Huella del Caminante",
        // Link to the creator (the artist's user account or admin if not available)
        createdById: artist.userId || adminUser.id,
        // Create date entries
        dates: {
          create: eventData.dates.map((date) => ({
            date: date.dateObj,
          })),
        },
        // Create images
        images: {
          create: eventData.images.map((img) => ({
            url: img.url,
            alt: img.alt,
          })),
        },
      },
    });

    console.log(`Created event: ${event.title} with ID: ${event.id} and slug: ${event.slug}`);
  }

  console.log("Seed completed successfully");
}

main()
  .catch((e) => {
    console.error("Error during seeding:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
